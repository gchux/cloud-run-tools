<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="cloud_run_qps_full" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="gcp/cloud-run/setup" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="gcp/cloud-run/variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="jmaas.vesrion" elementType="Argument">
              <stringProp name="Argument.name">jmaas.version</stringProp>
              <stringProp name="Argument.value">${__P(jmaas_version)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="jm.vesrion" elementType="Argument">
              <stringProp name="Argument.name">jm.version</stringProp>
              <stringProp name="Argument.value">${__P(jm_version)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gcp.run.test.id" elementType="Argument">
              <stringProp name="Argument.name">gcp.run.test.id</stringProp>
              <stringProp name="Argument.value">${__P(tid)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gcp.run.test.http.method" elementType="Argument">
              <stringProp name="Argument.name">gcp.run.test.http.method</stringProp>
              <stringProp name="Argument.value">${__P(http_method)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gcp.run.test.host" elementType="Argument">
              <stringProp name="Argument.name">gcp.run.test.host</stringProp>
              <stringProp name="Argument.value">${__P(host)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gcp.run.test.path" elementType="Argument">
              <stringProp name="Argument.name">gcp.run.test.path</stringProp>
              <stringProp name="Argument.value">${__P(path)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gcp.run.test.concurrency" elementType="Argument">
              <stringProp name="Argument.name">gcp.run.test.concurrency</stringProp>
              <stringProp name="Argument.value">${__P(concurrency)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gcp.run.test.rampup.time" elementType="Argument">
              <stringProp name="Argument.name">gcp.run.test.rampup.time</stringProp>
              <stringProp name="Argument.value">${__P(rampup_time)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gcp.run.test.rampup.steps" elementType="Argument">
              <stringProp name="Argument.name">gcp.run.test.rampup.steps</stringProp>
              <stringProp name="Argument.value">${__P(rampup_steps)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gcp.run.test.duration" elementType="Argument">
              <stringProp name="Argument.name">gcp.run.test.duration</stringProp>
              <stringProp name="Argument.value">${__P(duration)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="x.cloud.trace.id" elementType="Argument">
              <stringProp name="Argument.name">x.cloud.trace.id</stringProp>
              <stringProp name="Argument.value">${__P(trace_id)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gcp.run.instance.id" elementType="Argument">
              <stringProp name="Argument.name">gcp.run.instance.id</stringProp>
              <stringProp name="Argument.value">${__P(instance_id)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gcp.run.test.request.timeout" elementType="Argument">
              <stringProp name="Argument.name">gcp.run.test.request.timeout</stringProp>
              <stringProp name="Argument.value">${__P(request_timeout)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gcp.run.test.request.file" elementType="Argument">
              <stringProp name="Argument.name">gcp.run.test.request.file</stringProp>
              <stringProp name="Argument.value">${__P(request_file)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="gcp/cloud-run/token" enabled="true">
          <stringProp name="TestPlan.comments">fetch_1st_token</stringProp>
          <stringProp name="BeanShellSampler.query">import org.apache.commons.codec.digest.DigestUtils;
final String tid = vars.get(&quot;gcp.run.test.id&quot;);
final String command = &quot;/print_id_token https://&quot; + vars.get(&quot;gcp.run.test.host&quot;) + vars.get(&quot;gcp.run.test.path&quot;);
final Process p = Runtime.getRuntime().exec(command);
p.waitFor();
final BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
final StringBuilder gcloudAuthOutput = new StringBuilder();
String line;
while( (line = in.readLine()) != null) {
  gcloudAuthOutput.append(line);
}
in.close();
final String token = gcloudAuthOutput.toString().replaceAll(&quot;\n&quot;, &quot;&quot;);
final String tokenSHA1 = DigestUtils.sha1Hex(token);
vars.put(&quot;gcp.run.test.token&quot;, token);
props.put(&quot;gcp_run_test_token&quot;, token);
log.info(&quot;token[&quot; + tid + &quot;|0]=&quot; + token.substring(0, 15) + &quot;...|&quot; + tokenSHA1);</stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="gcp/cloud-run/token-generator" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="minute_looper" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="wait_1min" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">30000</stringProp>
          </TestAction>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="count_minutes" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">gcp.run.test.minutes</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="check_if_minutes_greater_than_duration" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(${gcp.run.test.minutes} &gt; ${gcp.run.test.duration})}</stringProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="stop_test_if_minutes_greater_than_duration" enabled="true">
              <intProp name="ActionProcessor.action">2</intProp>
              <intProp name="ActionProcessor.target">2</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="check_if_10mins_have_passed" enabled="true">
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="IfController.condition">${__groovy(${gcp.run.test.minutes}%10==0)}</stringProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="generate_new_token_after_10mins" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.commons.codec.digest.DigestUtils;
final String tid = vars.get(&quot;gcp.run.test.id&quot;);
final String command = &quot;/print_id_token https://&quot; + vars.get(&quot;gcp.run.test.host&quot;) + vars.get(&quot;gcp.run.test.path&quot;);
final Process p = Runtime.getRuntime().exec(command);
p.waitFor();
final BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
final StringBuilder gcloudAuthOutput = new StringBuilder();
String line;
while( (line = in.readLine()) != null) {
  gcloudAuthOutput.append(line);
}
in.close();
final String token = gcloudAuthOutput.toString().replaceAll(&quot;\n&quot;, &quot;&quot;);
final String tokenSHA1 = DigestUtils.sha1Hex(token);
vars.put(&quot;gcp.run.test.token&quot;, token);
props.put(&quot;gcp_run_test_token&quot;, token);
final String strMinutes = vars.get(&quot;gcp.run.test.minutes&quot;);
final String tokenNumber = Integer.toString(Integer.parseInt(strMinutes, 10)/10, 10);
log.info(&quot;token[&quot; + tid + &quot;|&quot; + tokenNumber  + &quot;]=&quot; + token.substring(0, 15) + &quot;...|&quot; + tokenSHA1);</stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="gcp/cloud-run/scheduling/qps">
        <collectionProp name="load_profile"/>
      </kg.apc.jmeter.timers.VariableThroughputTimer>
      <hashTree/>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="gcp/cloud-run/scheduling/dynamic">
        <collectionProp name="ultimatethreadgroupdata"/>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <kg.apc.jmeter.modifiers.RawRequestSourcePreProcessor guiclass="kg.apc.jmeter.modifiers.RawRequestSourcePreProcessorGui" testclass="kg.apc.jmeter.modifiers.RawRequestSourcePreProcessor" testname="gcp/cloud-run/test/http/request/file">
          <boolProp name="rewind">true</boolProp>
          <stringProp name="variable_name">gcp.run.test.request</stringProp>
          <stringProp name="filename">${gcp.run.test.request.file}</stringProp>
          <boolProp name="isHex">false</boolProp>
        </kg.apc.jmeter.modifiers.RawRequestSourcePreProcessor>
        <hashTree/>
        <kg.apc.jmeter.samplers.HTTPRawSampler guiclass="kg.apc.jmeter.samplers.HTTPRawSamplerGui" testclass="kg.apc.jmeter.samplers.HTTPRawSampler" testname="gcp/cloud-run/test/http/request">
          <stringProp name="hostname">${gcp.run.test.host}</stringProp>
          <stringProp name="port">443</stringProp>
          <boolProp name="keepalive">false</boolProp>
          <stringProp name="timeout">${gcp.run.test.request.timeout}</stringProp>
          <stringProp name="data">${gcp.run.test.request}&#xd;
Host: ${gcp.run.test.host}&#xd;
User-Agent: JMaaS/${jmaas.version} (jmeter/${jm.version})&#xd;
x-jmaas-test-id: ${gcp.run.test.id}&#xd;
x-jmaas-instance-id: ${gcp.run.instance.id}&#xd;
x-cloud-trace-context: ${x.cloud.trace.id}/${__Random(100000,999999)}${__Random(1000000000,2147483647)};o=1&#xd;
Authorization: Bearer ${__property(gcp_run_test_token)}&#xd;
&#xd;
</stringProp>
          <stringProp name="fileName">${gcp.run.test.request.file}_body</stringProp>
          <boolProp name="parse">true</boolProp>
        </kg.apc.jmeter.samplers.HTTPRawSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
